{
  "version": 3,
  "sources": ["../../src/index.js", "../../src/entity/index.js", "../../src/errors/basicError.js", "../../src/errors/paramError.js", "../../src/service/index.js", "../../src/provider.js", "../../src/requester/index.js", "../../src/service/apicep/adapters.js", "../../src/service/apicep/index.js", "../../src/service/brasilAPI/adapters.js", "../../src/service/brasilAPI/index.js", "../../src/errors/parserError.js", "../../src/service/correios/adapters.js", "../../src/service/correios/index.js", "../../src/service/viacep/adapters.js", "../../src/service/viacep/index.js", "../../src/factory.js", "../../src/cep.js", "../../src/lib.js"],
  "sourcesContent": ["import lib from \"./lib.js\"\n\nexport const cep = lib.cep\nexport const Provider = lib.Provider\nexport const Cep = lib.Cep\nexport const CepService = lib.CepService\nexport const factory = lib.factory", "export class Cep {\n\t/**\n\t * @param {{\n\t * cep: string,\n\t * street: string,\n\t * state: string,\n\t * neighborhood: string\n\t * }} param0\n\t */\n\tconstructor({\n\t\tcep,\n\t\tstreet,\n\t\tcity,\n\t\tstate,\n\t\tneighborhood,\n\t}) {\n\t\tthis.cep = cep\n\t\tthis.street = street\n\t\tthis.city = city\n\t\tthis.state = state\n\t\tthis.neighborhood = neighborhood\n\t}\n\t/**\n\t * @param {{\n\t * cep: string,\n\t * street: string,\n\t * state: string,\n\t * neighborhood: string\n\t * }} param0\n\t * @returns {Cep}\n\t */\n\tstatic create({\n\t\tcep,\n\t\tstreet,\n\t\tcity,\n\t\tstate,\n\t\tneighborhood,\n\t}) {\n\t\treturn new Cep({\n\t\t\tcep,\n\t\t\tstreet,\n\t\t\tcity,\n\t\t\tstate,\n\t\t\tneighborhood,\n\t\t})\n\t}\n}\n", "export class BasicError extends Error {}\n", "import { BasicError } from \"./basicError\"\n\nexport class ParamError extends BasicError {\n\tconstructor(args) {\n\t\tsuper(`invalid params ${args}`)\n\t}\n}\n", "import { ParamError } from \"../errors/paramError.js\"\n\nexport class CepService {\n\tstatic api\n\tbaseUrl = \"\"\n\tconstructor(api) {\n\t\tthis.api = api\n\t}\n\n\tgeneralParse(cep) {\n\t\treturn cep.replaceAll(\"-\", \"\")\n\t}\n\n\tvalidateCep(cep) {\n\t\tif (!/[0-9]{8}/.test(cep)) {\n\t\t\tthrow new ParamError(cep)\n\t\t}\n\t}\n\n\tasync execute(cep) {\n\t\tconst value = this.generalParse(cep)\n\t\tthis.validateCep(value)\n\t\tconst response = await this.handler(cep)\n\t\treturn response\n\t}\n\t// eslint-disable-next-line no-unused-vars\n\tasync handler(cep) {\n\t\tthrow new Error(\"not implemented\")\n\t}\n}\n", "// eslint-disable-next-line no-unused-vars\nimport { CepService } from \"./service/index.js\"\n\nexport class Provider {\n\tservices\n\t/**\n\t *\n\t * @param {CepService[]} services\n\t */\n\tconstructor(services) {\n\t\tthis.services = services\n\t}\n\n\tasync execute(cep) {\n\t\ttry {\n\t\t\tconst result = await Promise.any(\n\t\t\t\tthis.services.map((item) => item.execute(cep))\n\t\t\t)\n\t\t\treturn result\n\t\t} catch (error) {\n\t\t\tthrow new Error(\"error in execute cep\")\n\t\t}\n\t}\n}\n", "/**\n * @param {{\n * url: string,\n * method?: \"GET\"| \"POST\"| \"PUT\",\n * body?: any,\n * params?: any,\n * headers?: any\n * }} param0\n * @returns {{\n\t* json: () =>Promise<any>\n\t* text: () =>Promise<string>\n\t* ok: boolean,\n\t* status: number\n\t*}}\n */\nexport function Requester({\n\turl,\n\tmethod = \"GET\",\n\tbody,\n\tparams,\n\theaders,\n}) {\n\tconst searchParams = new URLSearchParams()\n\tconst options = {\n\t\tmethod,\n\t\tbody,\n\t\theaders\n\t}\n\tif (params) {\n\t\tfor (const key in params) {\n\t\t\tsearchParams.set(key, params[key])\n\t\t}\n\t}\n\n\tconst URL = `${url}?${searchParams.toString()}`\n\n\treturn fetch(URL, options)\n}\n", "import { Cep } from \"../../entity/index.js\"\n\n/**\n *\n * @param {{\n * code: string;\n * state: string;\n * city: string;\n * district?: string;\n * address: string;\n* }} data\n * @returns {Cep}\n */\nexport function responseToCep(data) {\n\treturn Cep.create({\n\t\tcep: data.code.replaceAll(\"-\", \"\"),\n\t\tcity: data.city,\n\t\tstate: data.state,\n\t\tneighborhood: data.district ?? \"\",\n\t\tstreet: data.address,\n\t})\n}\n", "import { Requester } from \"../../requester/index.js\"\nimport { CepService } from \"../index.js\"\nimport { responseToCep } from \"./adapters.js\"\n\nexport class ApiCepService extends CepService {\n\tconstructor() {\n\t\tsuper(\"apicep\")\n\t\tthis.baseUrl = \"https://ws.apicep.com/cep.json\"\n\t}\n\tasync handler(cep) {\n\t\tconst request = await Requester({\n\t\t\turl: this.baseUrl,\n\t\t\tparams: {\n\t\t\t\tcode: cep,\n\t\t\t},\n\t\t})\n\n\t\tconst data = await request.json()\n\n\t\tif (!request.ok) {\n\t\t\tthrow new Error(data)\n\t\t}\n\n\t\treturn responseToCep(data)\n\t}\n}\n", "import { Cep } from \"../../entity/index.js\"\n\nexport function responseToCep(data) {\n\treturn Cep.create({...data})\n}\n", "import { Requester } from \"../../requester/index.js\"\nimport { CepService } from \"../index.js\"\nimport { responseToCep } from \"./adapters.js\"\n\nexport class BrasilAPIService extends CepService {\n\tconstructor() {\n\t\tsuper(\"brasilAPI\")\n\t\tthis.baseUrl = \"https://brasilapi.com.br/api/cep/v1/\"\n\t}\n\n\tasync handler(cep) {\n\t\tconst request = await Requester({ url: `${this.baseUrl}/${cep}` })\n\t\tconst data = await request.json()\n\n\t\tif (!request.ok) {\n\t\t\tthrow new Error(data)\n\t\t}\n\t\treturn responseToCep(data)\n\t}\n}\n", "export class ParserError extends Error {\n\tapi = \"\"\n\n\t/**\n\t * @param {string} api\n\t * @param {string?} message\n\t */\n\tconstructor(api, message) {\n\t\tsuper(message)\n\t\tthis.api = api\n\t}\n}\n", "import { Cep } from \"../../entity/index.js\"\nimport { ParserError } from \"../../errors/parserError.js\"\n\nexport function parseParamsToXML(data) {\n\treturn `<?xml version=\"1.0\"?>\\n\t<soapenv:Envelope \t\txmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cli=\"http://cliente.bean.master.sigep.bsb.correios.com.br/\">  <soapenv:Header />  <soapenv:Body>    <cli:consultaCEP>      <cep>${data}</cep>    </cli:consultaCEP>  </soapenv:Body></soapenv:Envelope>`\n}\n\nexport function responseToCep(data) {\n\ttry {\n\t\tconst returnStatement =\n\t\t\tdata.replace(/\\r?\\n|\\r/g, \"\").match(/<return>(.*)<\\/return>/)?.[0] ?? \"\"\n\t\tif (returnStatement == \"\") {\n\t\t\t// TODO: create api enuns\n\t\t\tthrow new ParserError(`invalid regex got ${data}`, \"correios\")\n\t\t}\n\t\tconst cleanReturnStatement = returnStatement\n\t\t\t.replace(\"<return>\", \"\")\n\t\t\t.replace(\"</return>\", \"\")\n\t\tconst parsedReturnStatement = cleanReturnStatement\n\t\t\t.split(/</)\n\t\t\t.reduce((result, exp) => {\n\t\t\t\tconst splittenExp = exp.split(\">\")\n\t\t\t\tif (splittenExp.length > 1 && splittenExp[1].trim().length) {\n\t\t\t\t\tresult[splittenExp?.[0]] = splittenExp[1]\n\t\t\t\t}\n\t\t\t\treturn result\n\t\t\t}, {})\n\n\t\tif (parsedReturnStatement?.cep === \"\" || !parsedReturnStatement?.cep) {\n\t\t\tthrow new ParserError(\"not returnd a cep to parse\", \"correios\")\n\t\t}\n\t\treturn Cep.create({\n\t\t\tcep: parsedReturnStatement.cep ?? \"\",\n\t\t\tstate: parsedReturnStatement.uf ?? \"\",\n\t\t\tcity: parsedReturnStatement.cidade ?? \"\",\n\t\t\tstreet: parsedReturnStatement.bairro ?? \"\",\n\t\t\tneighborhood: parsedReturnStatement.end ?? \"\",\n\t\t})\n\t} catch (e) {\n\t\tthrow new ParserError(\"not implement xml\", \"correios\")\n\t}\n}\n", "import { Requester } from \"../../requester/index.js\"\nimport { CepService } from \"../index.js\"\nimport { parseParamsToXML, responseToCep } from \"./adapters.js\"\n\nexport class CorreiosService extends CepService {\n\tconstructor() {\n\t\tsuper(\"correios\")\n\t\tthis.baseUrl = \"https://apps.correios.com.br\"\n\t}\n\n\tasync handler(cep) {\n\t\tconst request = await Requester({\n\t\t\turl: `${this.baseUrl}/SigepMasterJPA/AtendeClienteService/AtendeCliente`,\n\t\t\tbody: parseParamsToXML(cep),\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/xml\",\n\t\t\t},\n\t\t})\n\t\tconst data = await request.text()\n\n\t\tif (!request.ok) {\n\t\t\tthrow new Error(data)\n\t\t}\n\n\t\treturn responseToCep(data)\n\t}\n}\n", "import { Cep } from \"../../entity/index.js\"\n\nexport function responseToCep(data) {\n\treturn Cep.create({\n\t\tcep: data?.cep?.replace(\"-\", \"\") ?? \"\",\n\t\tstate: data?.uf ?? \"\",\n\t\tcity: data?.localidade ?? \"\",\n\t\tstreet: data?.logradouro ?? \"\",\n\t\tneighborhood: data?.bairro ?? \"\",\n\t})\n}\n", "import { Requester } from \"../../requester/index.js\"\nimport { CepService } from \"../index.js\"\nimport { responseToCep } from \"./adapters.js\"\n\nexport class ViaCepService extends CepService {\n\tstatic baseUrl\n\tconstructor() {\n\t\tsuper(\"viacep\")\n\t\tthis.baseUrl = \"https://viacep.com.br\"\n\t}\n\n\tasync handler(cep) {\n\t\tconst request = await Requester({\n\t\t\turl: `${this.baseUrl}/ws/${cep}/json`,\n\t\t\tmethod: \"GET\",\n\t\t})\n\t\tconst data = await request.json()\n\n\t\tif (!request.ok) {\n\t\t\tthrow new Error(data)\n\t\t}\n\n\t\treturn responseToCep(data)\n\t}\n}\n", "import { Provider } from \"./provider.js\"\nimport { ApiCepService } from \"./service/apicep/index.js\"\nimport { BrasilAPIService } from \"./service/brasilAPI/index.js\"\nimport { CorreiosService } from \"./service/correios/index.js\"\nimport { ViaCepService } from \"./service/viacep/index.js\"\n\n\nexport default function ({\n\tuseDefaultProviders = true,\n\tcustonProviders,\n}) {\n\tlet services = []\n\tif (useDefaultProviders) {\n\t\tservices = [\n\t\t\tnew ViaCepService(),\n\t\t\tnew BrasilAPIService(),\n\t\t\tnew ApiCepService(),\n\t\t\tnew CorreiosService(),\n\t\t]\n\t}\n\tif (custonProviders?.length) {\n\t\tservices = [...services, ...custonProviders]\n\t}\n\n\treturn new Provider(services)\n}\n", "// eslint-disable-next-line no-unused-vars\nimport { Cep } from \"./entity/index.js\"\nimport factory from \"./factory.js\"\n\n/**\n *\n * @param {string} cep\n * @returns {Promise<Cep>}\n */\nexport const cep = (cep) => {\n\tconst handler = factory({\n\t\tuseDefaultProviders: true,\n\t})\n\treturn handler.execute(cep)\n}", "import { Cep } from \"./entity/index.js\"\nimport { CepService } from \"./service/index.js\"\nimport { cep } from \"./cep.js\"\nimport factory from \"./factory.js\"\nimport { Provider } from \"./provider.js\"\n\nexport default {\n\tCep,\n\tcep,\n\tCepService,\n\tProvider,\n\tfactory,\n}"],
  "mappings": "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",
  "names": ["src_exports", "__export", "Cep", "CepService", "Provider", "cep", "factory", "__toCommonJS", "Cep", "cep", "street", "city", "state", "neighborhood", "BasicError", "ParamError", "BasicError", "args", "CepService", "api", "__publicField", "cep", "ParamError", "value", "Provider", "services", "__publicField", "cep", "item", "Requester", "url", "method", "body", "params", "headers", "searchParams", "options", "key", "URL", "responseToCep", "data", "_a", "Cep", "ApiCepService", "CepService", "cep", "request", "Requester", "data", "responseToCep", "responseToCep", "data", "Cep", "BrasilAPIService", "CepService", "cep", "request", "Requester", "data", "responseToCep", "ParserError", "api", "message", "__publicField", "parseParamsToXML", "data", "responseToCep", "_a", "_b", "_c", "_d", "_e", "_f", "_g", "returnStatement", "ParserError", "parsedReturnStatement", "result", "exp", "splittenExp", "Cep", "CorreiosService", "CepService", "cep", "request", "Requester", "parseParamsToXML", "data", "responseToCep", "responseToCep", "data", "_a", "_b", "_c", "_d", "_e", "_f", "Cep", "ViaCepService", "CepService", "cep", "request", "Requester", "data", "responseToCep", "__publicField", "factory_default", "useDefaultProviders", "custonProviders", "services", "ViaCepService", "BrasilAPIService", "ApiCepService", "CorreiosService", "Provider", "cep", "factory_default", "lib_default", "Cep", "cep", "CepService", "Provider", "factory_default", "cep", "lib_default", "Provider", "Cep", "CepService", "factory"]
}
